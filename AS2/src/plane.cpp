/// @file
////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// Copyright (C) 2016/17      Christian Lessig, Otto-von-Guericke Universitaet Magdeburg
///
////////////////////////////////////////////////////////////////////////////////////////////////////
///
///  module     : Exercise 1
///
///  author     : lessig@isg.cs.ovgu.de
///
///  project    : GPU Programming
///
///  description: plane
///
////////////////////////////////////////////////////////////////////////////////////////////////////

// includes, file
#include "plane.h"

// includes, project
#include "util.h"

// includes, system
#include <iostream>

////////////////////////////////////////////////////////////////////////////////////////////////////
// constructor, default
////////////////////////////////////////////////////////////////////////////////////////////////////
Plane::Plane( std::shared_ptr<Material> m) :
  Geometry( m),
  n( ),
  t1( ),
  t2( ),
  size( )
{ }

////////////////////////////////////////////////////////////////////////////////////////////////////
// constructor, copy
////////////////////////////////////////////////////////////////////////////////////////////////////
Plane::Plane( const Plane& other) :
  Geometry( other),
  n( other.n),
  t1( other.t1),
  t2( other.t2),
  size( other.size)
{ }

////////////////////////////////////////////////////////////////////////////////////////////////////
// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////
Plane::~Plane() { };

////////////////////////////////////////////////////////////////////////////////////////////////////
// initialization
////////////////////////////////////////////////////////////////////////////////////////////////////
void
Plane::set( const vec3& normal, const vec3& tan1, const vec3& tan2, const vec2& tan_size) {

  assert( Util::dot( n, t1) < 100.0 * std::numeric_limits<float>::epsilon());
  assert( Util::dot( n, t2) < 100.0 * std::numeric_limits<float>::epsilon());

  n = normal;
  t1 = tan1;
  t2 = tan2;
  size = tan_size;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// compute intersection
////////////////////////////////////////////////////////////////////////////////////////////////////
bool
Plane::intersect( Ray& ray, Intersection& intersec ) const {

   float dotProd=dot(ray.dir,this->n);

   //return if ray is nearly parallel to plane
   if(abs(dotProd) < std::numeric_limits<float>::epsilon())
       return false;

float t = dot((this->pos-ray.origin), this->n)/dotProd;

if(t < ray.t && t >0 )
{
   ray.t = t;
   intersec.mat = this->mat;
   intersec.n = this->n;
   intersec.pos = ray.origin + t*ray.dir;
   intersec.w_out = ray.origin-intersec.pos;
   intersec.w_out = intersec.w_out / Util::norm(intersec.w_out);
   return true;
}
return false;
}

