
/// @file
////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// Copyright (C) 2016/17      Christian Lessig, Otto-von-Guericke Universitaet Magdeburg
///
////////////////////////////////////////////////////////////////////////////////////////////////////
///
///  module     : Exercise 1
///
///  author     : lessig@isg.cs.ovgu.de
///
///  project    : GPU Programming
///
///  description: Cuda implementation
///
////////////////////////////////////////////////////////////////////////////////////////////////////

// CUDA
#include <cuda.h>
#include <cuda_runtime.h>

// include, project
#include "cuda_util.h"
#include "scene.h"
#include "image.h"
#include "sphere.h"
#include "plane.h"
#include "phong.h"
#include "util.h"
#include "device_renderer.cuh"

// includes, system
#include <iostream>
#include <vector>
#include <map>
#include <chrono>
#include <algorithm>

//wozu device handle?
namespace {


}

////////////////////////////////////////////////////////////////////////////////////////////////////
//! Entry point to device
////////////////////////////////////////////////////////////////////////////////////////////////////
__global__
void
render() {

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//! Initialize device
////////////////////////////////////////////////////////////////////////////////////////////////////
bool
initDevice() {

    int deviceCount = 0;
      checkErrorsCuda( cudaGetDeviceCount(&deviceCount));

      if( 0 == deviceCount) {
        return false;
      }

      checkErrorsCuda( cudaSetDevice());

  return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//! Initialize memory
////////////////////////////////////////////////////////////////////////////////////////////////////
bool

initDeviceMemory( const Scene& scene, const Image& image) {


    // allocate device memory
    checkErrorsCuda( cudaMalloc((void **) &scene.geometry, sizeof(int) * scene.geometry.size()));
  checkErrorsCuda( cudaMalloc((void **) &scene.lights, sizeof(int) * scene.lights.size()));
  checkErrorsCuda( cudaMalloc((void **) &image.data, sizeof(int) * scene.data.size()));

    // copy device memory
    checkErrorsCuda( cudaMemcpy( scene.geometry, scene.geometry[0], sizeof(int) * scene.geometry.size(), cudaMemcpyHostToDevice));
     checkErrorsCuda( cudaMemcpy( scene.lights, scene.lights[0], sizeof(int) * scene.lights.size(), cudaMemcpyHostToDevice));
      checkErrorsCuda( cudaMemcpy( image.data, image.data[0], sizeof(int) * image.data.size(), cudaMemcpyHostToDevice));
  return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//! Initialize device
////////////////////////////////////////////////////////////////////////////////////////////////////
bool
runDevice( const unsigned int n_rows, const unsigned int n_cols) {

  return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//! Get image from device
////////////////////////////////////////////////////////////////////////////////////////////////////
bool
getImageDevice( Image& image) {

  checkErrorsCuda(cudaMemcpy( &image[0], image, sizeof(int) * image.size(), cudaMemcpyDeviceToHost));
  return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//! Cleanup device
////////////////////////////////////////////////////////////////////////////////////////////////////
void
cleanupDevice() {
     checkErrorsCuda( cudaFree());
}


