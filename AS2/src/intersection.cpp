/// @file
////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// Copyright (C) 2016/17      Christian Lessig, Otto-von-Guericke Universitaet Magdeburg
///
////////////////////////////////////////////////////////////////////////////////////////////////////
///
///  module     : Exercise 1
///
///  author     : lessig@isg.cs.ovgu.de
///
///  project    : GPU Programming
///
///  description: intersection point
///
////////////////////////////////////////////////////////////////////////////////////////////////////

// includes, file
#include "intersection.h"

// includes, project
#include "util.h"

// includes, system
#include <iostream>

////////////////////////////////////////////////////////////////////////////////////////////////////
// constructor, default
////////////////////////////////////////////////////////////////////////////////////////////////////
Intersection::Intersection() :
  pos(),
  w_out(),
  n(),
  mat()
{ }

////////////////////////////////////////////////////////////////////////////////////////////////////
// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////
Intersection::~Intersection() { }

////////////////////////////////////////////////////////////////////////////////////////////////////
// compute color value
////////////////////////////////////////////////////////////////////////////////////////////////////
float
Intersection::shade( const PointLight& light) const {

  vec3 w_in = light.pos - pos;
  w_in /= Util::norm( w_in);

  return light.ell * mat->shade( w_in, w_out, n);
}
