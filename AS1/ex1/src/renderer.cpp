/// @file
////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// Copyright (C) 2016/17      Christian Lessig, Otto-von-Guericke Universitaet Magdeburg
///
////////////////////////////////////////////////////////////////////////////////////////////////////
///
///  module     : Exercise 1
///
///  author     : lessig@isg.cs.ovgu.de
///
///  project    : GPU Programming
///
///  description: renderer
///
////////////////////////////////////////////////////////////////////////////////////////////////////

// includes, file
#include "renderer.h"

// includes, system
#include <iostream>

////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor, default
////////////////////////////////////////////////////////////////////////////////////////////////////
Renderer::Renderer() :
  cam( nullptr),
  scene( nullptr)
{ }

////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////
Renderer::~Renderer() {
  delete cam;
  delete scene;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Initialize
////////////////////////////////////////////////////////////////////////////////////////////////////
void
Renderer::init( Camera* cam_cur, Scene* scene_cur) {

  cam = cam_cur;
  scene = scene_cur;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// compute shading
////////////////////////////////////////////////////////////////////////////////////////////////////
float
Renderer::shade( const Intersection& intersec) {


float shade = 0.0;
    for( unsigned int i = 0; i < this->scene->lights.size(); ++i) {
      shade += intersec.shade(*(this->scene->lights[i]));
    }

  return shade;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// render
////////////////////////////////////////////////////////////////////////////////////////////////////
/*virtual*/ void
Renderer::render() {
    unsigned int num_cols = this->cam->image.n_cols;
    unsigned int num_rows = this->cam->image.n_rows;
    Intersection* intersec = new Intersection();
    Ray* ray = new Ray();
    for (unsigned int i = 0; i < num_rows; ++i) {
        for (unsigned int j = 0; j < num_cols; ++j) {

            this->cam->generateRay(i,j,*ray);

            if(this->scene->traceRay(*ray, *intersec))
            {
                this->cam->image(i,j) = shade(*intersec);
            }

        }

    }
    delete(ray);
    delete(intersec);

}
